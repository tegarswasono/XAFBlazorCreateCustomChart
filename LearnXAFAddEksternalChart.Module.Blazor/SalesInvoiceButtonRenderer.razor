@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using DevExpress.Blazor
@inject IJSRuntime JSRuntime;
@using DevExpress.Xpo;
@using LearnXAFAddEksternalChart.Module.BusinessObjects;

<DxFormLayout CssClass="w-100">
    <DxFormLayoutGroup Caption="Filter" ColSpanMd="12">
        <DxFormLayoutItem Caption="Start Date:" ColSpanMd="12">
            <DxDateEdit @bind-Date="@StartDate" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="End Date:" ColSpanMd="12">
            <DxDateEdit @bind-Date="@EndDate" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="" ColSpanMd="12">
            <DxButton RenderStyle="ButtonRenderStyle.Secondary"
                      Text="Filter Chart"
                      title="Filter Chart."
                      CssClass="mr-1" Click="RefreshChart" />
        </DxFormLayoutItem>
    </DxFormLayoutGroup>
    <DxFormLayoutGroup ColSpanMd="12" Caption="Chart">
        <DxChart T="TopOrderChartModel"
                 Data="@topOrderChartModels"
                 Width="100%">
            <DxChartTitle Text="Population: Age Structure">
                <DxChartSubTitle Text="Data Estimate for 2020" />
            </DxChartTitle>
            <DxChartBarSeries Name="Total Order"
                              T="TopOrderChartModel"
                              TArgument="string"
                              TValue="double"
                              ArgumentField="pasi => pasi.Name"
                              SummaryMethod="Enumerable.Sum"
                              ValueField="pasi => pasi.TotalOrder" />
            @*<DxChartBarSeries Name="Total Pay"
                              T="TopOrderChartModel"
                              TArgument="string"
                              TValue="double"
                              ArgumentField="pasi => pasi.Name"
                              SummaryMethod="Enumerable.Sum"
                              ValueField="pasi => pasi.TotalPay" />*@
            <DxChartLegend Position="RelativePosition.Outside"
                           HorizontalAlignment="HorizontalAlignment.Center"
                           VerticalAlignment="VerticalEdge.Bottom" />
            <DxChartTooltip Enabled="true"
                            Position="RelativePosition.Outside">
                <div style="margin: 0.75rem">
                    <div>Total: @context.Point.Value</div>
                </div>
            </DxChartTooltip>
        </DxChart>
        @*<div id="chart" style="width:500px; height: 300px;"></div>*@
    </DxFormLayoutGroup>
</DxFormLayout>

@code 
{
    DateTime StartDate { get; set; } = DateTime.Now.Date.AddDays(-30);
    DateTime EndDate { get; set; } = DateTime.Now.Date;
    List<TopOrderChartModel> topOrderChartModels { set; get; } = new List<TopOrderChartModel>();
    [Parameter]
    public Session session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RefreshChart();
    }

    void RefreshChart()
    {
        var items = (from a in session.QueryInTransaction<Order>()
                     where a.BuyAt >= StartDate && a.BuyAt < EndDate.AddDays(1)
                     group a by a.ProductName
                      into b
                     select new TopOrderChartModel { Name = b.Key.ToString(), TotalOrder = b.Count(), TotalPay = b.Sum(x => x.Price) }
                      ).OrderByDescending(x => x.TotalOrder).ThenByDescending(x => x.TotalPay).Take(5).ToList();
        topOrderChartModels = items;
    }

    public static RenderFragment Create(Session session) =>@<SalesInvoiceButtonRenderer session=@session />;

    class TopOrderChartModel
    {
        public string Name { set; get; }
        public double TotalOrder { set; get; }
        public double TotalPay { set; get; }
    }
}
